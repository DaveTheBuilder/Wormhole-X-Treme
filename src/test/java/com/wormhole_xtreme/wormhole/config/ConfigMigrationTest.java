package com.wormhole_xtreme.wormhole.config;

import com.wormhole_xtreme.wormhole.WormholeXTreme;
import org.bukkit.plugin.PluginDescriptionFile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ConfigMigrationTest {
    
    @TempDir
    Path tempDir;
    private WormholeXTreme mockPlugin;
    private File pluginFolder;
    private File oldConfigFile;
    
    @BeforeEach
    void setUp() throws IOException {
        // Create mock plugin
        mockPlugin = mock(WormholeXTreme.class);
        PluginDescriptionFile description = new PluginDescriptionFile("WormholeXTreme", "1.0.0", "com.wormhole_xtreme.wormhole.WormholeXTreme");
        when(mockPlugin.getDescription()).thenReturn(description);
        
        // Set up test directory structure
        pluginFolder = tempDir.resolve("WormholeXTreme").toFile();
        assertTrue(pluginFolder.mkdirs());
        when(mockPlugin.getDataFolder()).thenReturn(pluginFolder);
        
        // Create old config file
        oldConfigFile = new File(pluginFolder, "Settings.txt");
    }
    
    private void createOldConfig(String content) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(oldConfigFile))) {
            writer.write("# WormholeXTreme Configuration\n");
            writer.write("# Generated by WormholeXTreme v1.0.0\n\n");
            writer.write(content);
        }
    }
    
    @Test
    void testMigrationWithAllSettings() throws Exception {
        // Create an old config file with all settings
        createOldConfig(
            "BUILT_IN_PERMISSIONS_ENABLED=true\n" +
            "BUILT_IN_DEFAULT_PERMISSION_LEVEL=WORMHOLE_USE_PERMISSION\n" +
            "PERMISSIONS_SUPPORT_DISABLE=false\n" +
            "SIMPLE_PERMISSIONS=false\n" +
            "WORMHOLE_USE_IS_TELEPORT=true\n" +
            "TIMEOUT_ACTIVATE=30\n" +
            "TIMEOUT_SHUTDOWN=38\n" +
            "BUILD_RESTRICTION_ENABLED=true\n" +
            "BUILD_RESTRICTION_GROUP_ONE=1\n" +
            "BUILD_RESTRICTION_GROUP_TWO=2\n" +
            "BUILD_RESTRICTION_GROUP_THREE=3\n" +
            "USE_COOLDOWN_ENABLED=true\n" +
            "USE_COOLDOWN_GROUP_ONE=120\n" +
            "USE_COOLDOWN_GROUP_TWO=60\n" +
            "USE_COOLDOWN_GROUP_THREE=30\n" +
            "HELP_SUPPORT_DISABLE=false\n" +
            "WORLDS_SUPPORT_ENABLED=true\n" +
            "LOG_LEVEL=INFO\n"
        );
        
        // Run migration
        boolean result = ConfigMigrationUtil.migrateOldConfig(mockPlugin);
        assertTrue(result, "Migration should complete successfully");
        
        // Verify new config was created
        File newConfigFile = new File(pluginFolder, "config.yml");
        assertTrue(newConfigFile.exists(), "New config file should be created");
        
        // Load the new config and verify values
        WormholeConfig config = new WormholeConfig(mockPlugin);
        assertTrue(config.get(WormholeConfig.BUILT_IN_PERMISSIONS_ENABLED), "BUILT_IN_PERMISSIONS_ENABLED should be true");
        assertEquals("WORMHOLE_USE_PERMISSION", config.get(WormholeConfig.BUILT_IN_DEFAULT_PERMISSION_LEVEL), "Default permission level should be WORMHOLE_USE_PERMISSION");
        assertFalse(config.get(WormholeConfig.PERMISSIONS_SUPPORT_DISABLE), "PERMISSIONS_SUPPORT_DISABLE should be false");
        assertFalse(config.get(WormholeConfig.SIMPLE_PERMISSIONS), "SIMPLE_PERMISSIONS should be false");
        assertTrue(config.get(WormholeConfig.WORMHOLE_USE_IS_TELEPORT), "WORMHOLE_USE_IS_TELEPORT should be true");
        assertEquals(30, config.get(WormholeConfig.TIMEOUT_ACTIVATE), "TIMEOUT_ACTIVATE should be 30");
        assertEquals(38, config.get(WormholeConfig.TIMEOUT_SHUTDOWN), "TIMEOUT_SHUTDOWN should be 38");
        assertTrue(config.get(WormholeConfig.BUILD_RESTRICTION_ENABLED), "BUILD_RESTRICTION_ENABLED should be true");
        assertEquals(1, config.get(WormholeConfig.BUILD_RESTRICTION_GROUP_ONE), "BUILD_RESTRICTION_GROUP_ONE should be 1");
        assertEquals(2, config.get(WormholeConfig.BUILD_RESTRICTION_GROUP_TWO), "BUILD_RESTRICTION_GROUP_TWO should be 2");
        assertEquals(3, config.get(WormholeConfig.BUILD_RESTRICTION_GROUP_THREE), "BUILD_RESTRICTION_GROUP_THREE should be 3");
        assertTrue(config.get(WormholeConfig.USE_COOLDOWN_ENABLED), "USE_COOLDOWN_ENABLED should be true");
        assertEquals(120, config.get(WormholeConfig.USE_COOLDOWN_GROUP_ONE), "USE_COOLDOWN_GROUP_ONE should be 120");
        assertEquals(60, config.get(WormholeConfig.USE_COOLDOWN_GROUP_TWO), "USE_COOLDOWN_GROUP_TWO should be 60");
        assertEquals(30, config.get(WormholeConfig.USE_COOLDOWN_GROUP_THREE), "USE_COOLDOWN_GROUP_THREE should be 30");
        assertFalse(config.get(WormholeConfig.HELP_SUPPORT_DISABLE), "HELP_SUPPORT_DISABLE should be false");
        assertTrue(config.get(WormholeConfig.WORLDS_SUPPORT_ENABLED), "WORLDS_SUPPORT_ENABLED should be true");
        assertEquals("INFO", config.get(WormholeConfig.LOG_LEVEL), "LOG_LEVEL should be INFO");
        
        // Verify old config was renamed
        File backupFile = new File(pluginFolder, "Settings.old");
        assertFalse(oldConfigFile.exists(), "Old config file should be renamed");
        assertTrue(backupFile.exists(), "Backup file should be created");
    }
    
    @Test
    void testMigrationWithNoOldConfig() {
        // Don't create old config file
        boolean result = ConfigMigrationUtil.migrateOldConfig(mockPlugin);
        assertTrue(result, "Migration should complete successfully when no old config exists");
        
        // Verify new config was created with defaults
        File newConfigFile = new File(pluginFolder, "config.yml");
        assertTrue(newConfigFile.exists(), "New config file should be created");
        
        // Verify no backup was created
        File backupFile = new File(pluginFolder, "Settings.old");
        assertFalse(backupFile.exists(), "Backup file should not be created when no old config exists");
    }
    
    @Test
    void testMigrationWithInvalidValues() throws Exception {
        // Create an old config file with some invalid values
        createOldConfig(
            "BUILT_IN_PERMISSIONS_ENABLED=not_a_boolean\n" +
            "TIMEOUT_ACTIVATE=not_an_integer\n" +
            "BUILT_IN_DEFAULT_PERMISSION_LEVEL=INVALID_PERMISSION\n"
        );
        
        // Run migration - should not throw exceptions
        boolean result = ConfigMigrationUtil.migrateOldConfig(mockPlugin);
        assertTrue(result, "Migration should complete successfully even with invalid values");
        
        // Verify new config was created with defaults for invalid values
        WormholeConfig config = new WormholeConfig(mockPlugin);
        assertFalse(config.get(WormholeConfig.BUILT_IN_PERMISSIONS_ENABLED), "Should use default for invalid boolean");
        assertEquals(30, config.get(WormholeConfig.TIMEOUT_ACTIVATE), "Should use default for invalid integer");
        assertEquals("WORMHOLE_USE_PERMISSION", config.get(WormholeConfig.BUILT_IN_DEFAULT_PERMISSION_LEVEL), "Should use default for invalid permission level");
    }
}
